<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Probability that the true response rate of the new treatment is higher than a benchmark</title>
  <style>
    :root{
      --bg:#0b1020; --panel:#121a33; --ink:#f3f5ff; --muted:#aab3d7; --accent:#7aa2ff; --accent2:#5be7c4; --shadow:rgba(0,0,0,0.35);
      --radius:14px; --pad:16px; --gap:12px;
    }
    html,body{height:100%}
    body{margin:0;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial;background:radial-gradient(1200px 800px at 70% -20%,#18224a,var(--bg));color:var(--ink)}
    .wrap{max-width:960px;margin:20px auto 80px;padding:0 16px}
    h1{font-size:22px;line-height:1.35;margin:6px 0 10px}
    .card{background:linear-gradient(180deg,#121a33,#0f1730);border:1px solid #1e2a57;border-radius:var(--radius);box-shadow:0 10px 30px var(--shadow)}
    .body{padding:var(--pad)}
    .grid{display:grid;grid-template-columns:1fr;gap:14px}
    .row{display:grid;grid-template-columns:1fr 1fr;gap:var(--gap)}
    .row-compact{display:grid;grid-template-columns:1fr 1fr;gap:var(--gap);align-items:end}
    @media (max-width:760px){
      .wrap{padding:0 12px}
      h1{font-size:20px}
      .row,.row-compact{grid-template-columns:1fr}
      :root{--pad:14px;--gap:10px}
    }
    label{font-size:12px;color:var(--muted);margin-bottom:6px;display:block}
    .inline-pair{display:grid;grid-template-columns:auto 1fr;gap:8px;align-items:center}
    input[type="number"],select{width:100%;padding:12px 14px;border-radius:10px;border:1px solid #223064;background:#0b1430;color:var(--ink);font-size:16px;box-sizing:border-box}
    input[type="range"]{width:100%}
    .btnbar{display:flex;flex-wrap:wrap;gap:8px}
    .btn{background:#152042;color:var(--ink);border:1px solid #223064;padding:10px 14px;border-radius:10px;cursor:pointer;font-size:14px}
    .btn.active{outline:2px solid var(--accent);border-color:var(--accent)}
    .sp{height:8px}
    .big{font-size:28px;font-weight:800;color:var(--accent2)}
    .kpi{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
    @media (max-width:760px){.big{font-size:26px}.kpi{grid-template-columns:1fr}}
    .pill{background:#0a1430;border:1px solid #223064;border-radius:12px;padding:10px 12px}
    .pill .title{font-size:12px;color:var(--muted);margin-bottom:2px}
    .pill .val{font-size:18px;font-weight:700}
    .note{color:var(--muted);font-size:12px;margin-top:6px}
    .warn{color:#ff7676;font-size:12px}
    /* Responsive canvas */
    .plot-wrap{position:relative}
    canvas{width:100%;height:auto;aspect-ratio:7/3;border-radius:12px;background:#0a1430;border:1px solid #223064;display:block}
    details{border:1px solid #223064;border-radius:12px;padding:10px 12px;background:#0a1430}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>Probability that the true response rate of the new treatment is higher than a benchmark</h1>

    <div class="grid">
      <!-- New treatment -->
      <div class="card"><div class="body">
        <h2 style="font-size:16px;margin:0 0 10px;">New treatment</h2>
        <div class="row-compact">
          <div class="inline-pair">
            <span style="font-size:12px;color:var(--muted);">Responders</span>
            <input id="x" type="number" min="0" step="1" value="10" />
          </div>
          <div class="inline-pair">
            <span style="font-size:12px;color:var(--muted);">Sample size</span>
            <input id="n" type="number" min="1" step="1" value="30" />
          </div>
        </div>

        <div class="sp"></div>
        <h2 style="font-size:16px;margin:8px 0;">Your expectations prior to seeing these data</h2>
        <div class="btnbar">
          <button class="btn active" id="prior-none">No expectation</button>
          <button class="btn" id="prior-expect">Set expectation</button>
        </div>
        <div class="sp"></div>
        <div id="prior-expect-panel" style="display:none" class="row">
          <div>
            <label>Expected ORR percent</label>
            <input id="prior-mean-pct" type="number" min="0" max="100" step="0.1" value="30" />
          </div>
          <div>
            <label>Evidence strength</label>
            <select id="prior-strength-cat">
              <option value="weak">Weak</option>
              <option value="moderate" selected>Moderate</option>
              <option value="strong">Strong</option>
            </select>
          </div>
        </div>
      </div></div>

      <!-- Historical benchmark -->
      <div class="card"><div class="body">
        <h2 style="font-size:16px;margin:0 0 10px;">Historical benchmark</h2>
        <div class="row">
          <div>
            <label>Historical ORR percent</label>
            <input id="thrPct" type="number" min="0" max="100" step="0.1" value="20" />
            <input id="thrPctSlider" type="range" min="0" max="100" step="0.1" value="20" />
          </div>
          <div>
            <label>Evidence strength</label>
            <select id="hist-strength-cat">
              <option value="weak">Weak (e.g., P1)</option>
              <option value="moderate">Moderate (e.g., P2)</option>
              <option value="strong" selected>Strong (e.g., P3)</option>
            </select>
            <div class="note">Controls how much uncertainty we assign to the historical rate.</div>
          </div>
        </div>
        <div class="row">
          <div>
            <label>Margin above benchmark (percentage points)</label>
            <input id="marginPct" type="number" min="0" max="50" step="0.1" value="0" />
            <input id="marginPctSlider" type="range" min="0" max="50" step="0.1" value="0" />
          </div>
          <div></div>
        </div>
        <div class="sp"></div>
        <div class="warn" id="warn"></div>
      </div></div>

      <!-- Results -->
      <div class="card"><div class="body">
        <h2 style="font-size:16px;margin:0 0 10px;">Results</h2>
        <div class="big" id="probtext">0.00%</div>
        <div class="kpi">
          <div class="pill"><div class="title">Estimated true ORR</div><div class="val" id="postmean">–</div></div>
          <div class="pill"><div class="title">95% credible range</div><div class="val" id="ci">–</div></div>
        </div>
        <div class="sp"></div>
        <div class="plot-wrap"><canvas id="plot" aria-label="Posterior density plot"></canvas></div>
      </div></div>

      <details>
        <summary>Notes for statisticians</summary>
        <div class="body" style="padding:0;margin-top:8px;">
          <p class="note">New treatment: Binomial likelihood with Beta prior. “No expectation” uses Beta(1,1). “Set expectation” uses mean m and effective sample size s (ESS) to set Beta(ms, (1−m)s). Historical benchmark is modeled as θ<sub>hist</sub> ∼ Beta(m₀·μ₀, m₀·(1−μ₀)), where μ₀ is the entered percent and m₀ is chosen by strength (weak=20, moderate=60, strong=200). We report P(θ<sub>new</sub> &gt; θ<sub>hist</sub> + δ) via Monte Carlo sampling, where δ is the user-entered absolute margin (percentage points). The 95% range is a 95% credible interval from sample quantiles.</p>
        </div>
      </details>
    </div>
  </div>

<script>
// --- Monte Carlo helpers ---
function normalRand(){ let u=0,v=0; while(u===0) u=Math.random(); while(v===0) v=Math.random(); return Math.sqrt(-2*Math.log(u))*Math.cos(2*Math.PI*v); }
function gammaRand(k, theta=1){ if(k <= 0) return 0; if(k < 1){ const u=Math.random(); return gammaRand(1+k,theta)*Math.pow(u,1/k); } const d=k-1/3, c=1/Math.sqrt(9*d); while(true){ let x,v; do{ x=normalRand(); v=1+c*x; }while(v<=0); v=v*v*v; const u=Math.random(); if(u < 1 - 0.0331*(x*x)*(x*x)) return d*v*theta; if(Math.log(u) < 0.5*x*x + d*(1 - v + Math.log(v))) return d*v*theta; } }
function betaDraw(a,b){ const g1=gammaRand(a), g2=gammaRand(b); return g1/(g1+g2); }

function summarizePosterior(a,b, draws){
  const N = Math.max(12000, Math.floor(draws||40000));
  const vals = new Float64Array(N);
  let sum=0;
  for(let i=0;i<N;i++){ const p = betaDraw(a,b); vals[i]=p; sum+=p; }
  const arr = Array.from(vals).sort((x,y)=>x-y);
  const q = p => arr[Math.min(N-1, Math.max(0, Math.round(p*(N-1))))];
  return {samples: arr, mean: sum/N, q025: q(0.025), q50: q(0.5), q975: q(0.975)};
}

function toProp(pct){ const v=+pct; if(!isFinite(v)) return 0; return Math.min(1, Math.max(0, v/100)); }
function fmtPct(x){ if(!isFinite(x)) return '–'; return (x*100).toFixed(2)+'%'; }

// Responsive plot
function drawFromSamples(canvas, samples, line){
  const dpr = Math.max(1, window.devicePixelRatio || 1);
  const cssW = canvas.clientWidth || 600; const cssH = Math.max(180, Math.round(cssW * 3/7));
  if(canvas.width !== Math.round(cssW*dpr) || canvas.height !== Math.round(cssH*dpr)){
    canvas.width = Math.round(cssW*dpr); canvas.height = Math.round(cssH*dpr);
  }
  const ctx = canvas.getContext('2d');
  ctx.setTransform(dpr,0,0,dpr,0,0);
  const W=cssW, H=cssH; ctx.clearRect(0,0,W,H); ctx.fillStyle='#0a1430'; ctx.fillRect(0,0,W,H);
  const pad=30; const plotW=W-2*pad; const plotH=H-2*pad; const X=v=>pad+v*plotW; const Y=v=>H - pad - v*plotH;
  const B=Math.min(200, Math.max(100, Math.round(plotW/4))); const bins=new Array(B).fill(0); const N=samples.length || 0;
  for(let i=0;i<N;i++){ let t=samples[i]; if(t<=0) t=0; if(t>=1) t=1-1e-9; const k=Math.min(B-1, Math.floor(t*B)); bins[k]++; }
  const maxc=Math.max(...bins, 1);
  ctx.beginPath(); ctx.strokeStyle='#7aa2ff'; ctx.lineWidth=2;
  for(let k=0;k<B;k++){ const x=(k+0.5)/B; const y=bins[k]/maxc; const px=X(x), py=Y(y); if(k===0) ctx.moveTo(px,py); else ctx.lineTo(px,py); }
  ctx.stroke();
  if(line!=null){ const t=Math.max(0,Math.min(1,line)); ctx.strokeStyle='#5be7c4'; ctx.setLineDash([4,4]); ctx.beginPath(); ctx.moveTo(X(t), Y(0)); ctx.lineTo(X(t), Y(1)); ctx.stroke(); ctx.setLineDash([]); }
  ctx.fillStyle='#aab3d7'; ctx.font='11px system-ui, -apple-system, Segoe UI, Roboto'; for(let k=0;k<=5;k++){ const xv=k/5; const tx=X(xv); ctx.fillRect(tx, H-pad, 1, 6); ctx.fillText((xv*100).toFixed(0)+'%', tx-12, H-8); }
}

// Elements
const els = {
  x: document.getElementById('x'), n: document.getElementById('n'),
  pNone: document.getElementById('prior-none'), pExpect: document.getElementById('prior-expect'), priorPanel: document.getElementById('prior-expect-panel'),
  priorMeanPct: document.getElementById('prior-mean-pct'), priorStrengthCat: document.getElementById('prior-strength-cat'),
  thrPct: document.getElementById('thrPct'), thrPctSlider: document.getElementById('thrPctSlider'), histStrengthCat: document.getElementById('hist-strength-cat'),
  marginPct: document.getElementById('marginPct'), marginPctSlider: document.getElementById('marginPctSlider'),
  probtext: document.getElementById('probtext'), postmean: document.getElementById('postmean'), ci: document.getElementById('ci'), plot: document.getElementById('plot'), warn: document.getElementById('warn')
};

let priorMode='none';
const strengthToESS = { weak: 20, moderate: 60, strong: 200 };

function priorNew(){
  if(priorMode==='none') return {a0:1, b0:1};
  const mu = toProp(els.priorMeanPct.value);
  const ess = strengthToESS[els.priorStrengthCat.value] || 60;
  return {a0: mu*ess + 1e-9, b0: (1-mu)*ess + 1e-9};
}
function posterior(x,n,a0,b0){ return {a:a0+x, b:b0+(n-x)}; }

function compute(){
  els.warn.textContent='';
  const n = Math.max(1, Math.floor(+els.n.value||0));
  const x = Math.min(n, Math.max(0, Math.floor(+els.x.value||0)));
  if(x>n){ els.warn.textContent = 'Responders cannot exceed total.'; return; }
  const pr = priorNew();
  const post = posterior(x,n,pr.a0,pr.b0);

  // Historical benchmark as uncertain around its mean with chosen strength
  const mu0 = toProp(els.thrPct.value);
  const ess0 = strengthToESS[els.histStrengthCat.value] || 200; const a0=mu0*ess0 + 1e-9, b0=(1-mu0)*ess0 + 1e-9;
  // User margin (absolute percentage points)
  const delta = toProp(els.marginPct.value);

  // Sample new and hist, then probability new > hist + delta
  const newOut = summarizePosterior(post.a, post.b, 40000);
  const histOut = summarizePosterior(a0, b0, 40000);
  let cnt=0; const N=Math.min(newOut.samples.length, histOut.samples.length);
  for(let i=0;i<N;i++){ if(newOut.samples[i] > Math.min(1, histOut.samples[i] + delta)) cnt++; }
  const pAbove = cnt/N;

  els.probtext.textContent = fmtPct(pAbove);
  els.postmean.textContent = (newOut.mean*100).toFixed(1)+'%';
  els.ci.textContent = (newOut.q025*100).toFixed(1)+'% to '+(newOut.q975*100).toFixed(1)+'%';
  // Draw vertical line at mean benchmark + margin (clamped)
  const lineAt = Math.min(1, mu0 + delta);
  window._lastSamples = newOut.samples;
  drawFromSamples(els.plot, newOut.samples, lineAt);
}

function bind(){
  // Prior toggle
  els.pNone.addEventListener('click', ()=>{ priorMode='none'; els.pNone.classList.add('active'); els.pExpect.classList.remove('active'); els.priorPanel.style.display='none'; compute(); });
  els.pExpect.addEventListener('click', ()=>{ priorMode='expect'; els.pExpect.classList.add('active'); els.pNone.classList.remove('active'); els.priorPanel.style.display='grid'; compute(); });

  // Inputs
  [els.x, els.n, els.priorMeanPct, els.priorStrengthCat, els.histStrengthCat].forEach(e=> e.addEventListener('input', compute));
  // Two-way binds for sliders
  els.thrPct.addEventListener('input', ()=>{ els.thrPctSlider.value = els.thrPct.value; compute(); });
  els.thrPctSlider.addEventListener('input', ()=>{ els.thrPct.value = els.thrPctSlider.value; compute(); });
  els.marginPct.addEventListener('input', ()=>{ els.marginPctSlider.value = els.marginPct.value; compute(); });
  els.marginPctSlider.addEventListener('input', ()=>{ els.marginPct.value = els.marginPctSlider.value; compute(); });

  // Redraw plot on resize (mobile orientation changes, etc.)
  window.addEventListener('resize', ()=>{
    const lineAt = Math.min(1, toProp(els.thrPct.value) + toProp(els.marginPct.value));
    drawFromSamples(els.plot, (window._lastSamples||[]), lineAt);
  });
}

bind();
compute();
</script>
</body>
</html>
